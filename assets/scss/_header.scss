// Page Header — Der Kinderarzt vom Bodensee

@use 'globals';
@use 'typography';

header {
  // Lift the header element above the body-dim element
  position: relative;
  z-index: 1;
}

.welle {
  // Picture element showing the wave/curve at the top
  img {
	width: 100%;
	height: auto;
  }
}

div.header-layout {
  // The horizontal layout of
  // [Logo] [Navigation]

  // On mobile and tablet the layout breaks into two "lines"
  // [Logo] [Nav toggle]
  // [ ------ Nav -----]

  display: flex;
  column-gap: var(--grid-gap);
  flex-wrap: wrap;
  align-items: stretch;

  // Needs background color because #overlay-dimmer will otherwise determine the background of the nav
  background: var(--color-page);

  // Pull towards the edges to match the grid, but not beyond the edges
  margin-left: max(calc(var(--grid-margin) - 5.7%), 0);
  margin-right: max(calc(var(--grid-margin) - (22px - .5rem)), 0);

  // Center on large displays
  @media (min-width: #{globals.$break-point-desktop}) {
    margin-left: var(--grid-margin-adaptive);
    margin-right: var(--grid-margin-adaptive);
  }
  max-width: calc(#{globals.$break-point-desktop-max} - (2 * var(--grid-margin)));

  // The push the [navigation] or the content down - depending on layout
  margin-bottom: var(--spacer-abschnitt);
}

div.logo-container {
  // Contains the picture element of the logo. The design uses different logos for mobile+tablet vs. desktop

  // The logo-container should grow to fill the space, but keep enough room for the nav toggle
  //  logo takes up 100% of the width minus the gap, minus the toggle size but the toggle padding is 1rem and the toggle is pushed to the edge, and minus the grid-margin
  flex-basis: calc(100% - var(--grid-gap) - 44px + 1rem - var(--grid-margin));

  // Desktop Logo has a static size on all desktop displays
  @media (min-width: #{globals.$break-point-desktop}) {
    flex-basis: 399px;
  }

  img {
    display: block; //avoid line-height
    width: 100%;
    height: auto;
    max-height: 4.875rem;

    // The image will position itself as if it was a background image st to cover, no-repeat, left
    object-fit: contain;
    object-position: left;

    @media (min-width: #{globals.$break-point-desktop}) {
      // On desktop the logo is defined by width alone.
      max-height: unset;

      // It is pulled left to align the image’s contents with the grid
      transform: translateX(-7.77%);
    }
  }
}

input#nav-toggle { //Checkbox
  // Hidden checkbox to toggle the menu
  position: absolute;
  left: -5000px;
}
#nav-toggle ~ label[for="nav-toggle"].triggered-by-nav-toggle {
  // The nav-toggle has a min-size of the min touch area
  min-width: 44px;
  min-height: 44px;

  svg.icon {
    // Positioning itself in the center center position
    position: relative;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  // By default the close icon is hidden and the menu icon is visible
  #menu {
    display: block;
  }
  #close {
    display: none;
  }
}

#nav-toggle:checked ~ label[for="nav-toggle"].triggered-by-nav-toggle {
  // When the checkbox is checked by clicking the label, the close icon becomes visible, the menu icon is hidden
  #menu {
    display: none;
  }
  #close {
    display: block;
  }
}

// The desktop navigation is always visible, hide the toggle
@media (min-width: #{globals.$break-point-desktop}) {
  #nav-toggle, label[for="nav-toggle"] {
    display: none;
  }
}

nav.triggered-by-nav-toggle {
  // This is the actual navigation. It is hidden by default
  display: none;

  // The navigation does not take up any vertical space. This means it can be shows and hidden without a reflow of the page.
  height: 0;
  overflow: visible;

  // It is a wide as possible
  flex-basis: 100%;

  // Set a new stacking context for z-index
  position: relative;

  // No fancy dropdown on desktop
  @media (min-width: #{globals.$break-point-desktop}) {
    // desktop navigation is always visible
    display: block;

    // nav element should grow to occupy available space
    flex-grow: 1;
    height: unset;
    flex-basis: auto;
  }

  ul, ol {
  @media (max-width: #{globals.$break-point-desktop-}) {
    &::after {
      // Usually the body:has() will show the overlay-dimmer element, but Firefox doesn’t support :has() yet.
      // This adds a line at the bottom edge of the navigation
      display: block;
      content: "";
      height: 1px;
      background: var(--color-shadow);
      margin-top: var(--spacer-abschnitt);
    }
  }

    // Needs background color because otherwise #overlay-dimmer will determine the background color
    background: var(--color-page);

    // Resets
    margin: 0;
    list-style: none;

    padding: var(--spacer-abschnitt) 0 0 0;

    // Position the List Block at the bottom right of the container
    @media (min-width: #{globals.$break-point-desktop}) {
      padding: 0;
      position: absolute;

      right: -.75rem; // Negative the amount of padding in the list elements to keep the clickable area consistent the padding of the last element is the same as all the others
      bottom: 18px;
    }

    li {
      // By default list items positin themselves stacked with centered text
      display: block;
      text-align: center;

      @media (min-width: #{globals.$break-point-tablet}) {
        // On tablet the text is right aligned
        text-align: right;
      }

      @media (min-width: #{globals.$break-point-desktop}) {
        // On desktop the list items behave like normal text/inline elements
        display: inline-block;
        text-align: left;
      }

      a {
        // Set minimum size of link to touch minimum touch area
        display: block;
        padding: calc(22px - 0.5em);
        @media (min-width: #{globals.$break-point-tablet}) {
          // On tablet the items are right-aligned to the edge of the viewport and need to maintain the grid-margin
          padding-right: max(calc(22px - 0.5em), var(--grid-margin));
        }

        @media (min-width: #{globals.$break-point-desktop}) {
          // On desktop the items are inline-block and need to space themselves evenly
          padding-right: unset;
          padding: 0 .75rem;
        }
      }

      a, a:link, a:active, a:visited {
        @include typography.navigation();

        &.current {
          color: var(--color-secondary-elements-and-links);
        }
      }

      a:hover, a:focus {
        text-decoration: underline;
      }
    }
  }
}

// Show the navigation while the nav-toggle checkbox is checked
#nav-toggle:checked ~ nav.triggered-by-nav-toggle {
  display: block;
}

@media (max-width: #{globals.$break-point-desktop-}) {
  // Dim the body while the nav-toggle checkbox is checked, if the checkbox is actually being used
  body:has(#nav-toggle:checked) #overlay-dimmer {
    opacity: 1;
  }
}
